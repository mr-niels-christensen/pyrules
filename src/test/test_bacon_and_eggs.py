import unittest
import pyrules.rulebook
import itertools

'''Simple example of what pyrules can do.

   The setUp() method defines a Rulebook with four rules,
   two of which are facts (rules with no premises).
   Together these rules generate an infinite number of terms.
   
   EXAMPLE_GENERATED_TERMS lists a number of terms generated by that Rulebook.
   The single test method shows how to iterate over the terms generated by the Rulebook.
'''
class Test(unittest.TestCase):
    def setUp(self):
        r = pyrules.rulebook.Rulebook()
        ( #Rule 0: If X is nice, then ('bacon', X) is good.
         r.rule('good', ('bacon', 'X'))
         .premise('nice', 'X')
        )
        ( #Rule 1: If X is good, then ('eggs', X) is nice.
         r.rule('nice', ('eggs', 'X'))
         .premise('good', 'X')
        )
        r.rule('nice', 'beans') #Rule 3: 'beans' are nice.
        r.rule('good', 'toast') #Rule 4: 'toast' is good.
        self.rulebook = r
    
    def test_first_100(self):
        first_100 = set(itertools.islice(self.rulebook.generate_terms(), 100))
        for term in EXAMPLE_GENERATED_TERMS:
            self.assertIn(term, first_100)

EXAMPLE_GENERATED_TERMS = [eval(line) for line in
                           '''('nice', 'beans')
('good', 'toast')
('good', ('bacon', 'beans'))
('nice', ('eggs', 'toast'))
('nice', ('eggs', ('bacon', 'beans')))
('good', ('bacon', ('eggs', 'toast')))
('good', ('bacon', ('eggs', ('bacon', 'beans'))))
('nice', ('eggs', ('bacon', ('eggs', 'toast'))))
('nice', ('eggs', ('bacon', ('eggs', ('bacon', 'beans')))))
('good', ('bacon', ('eggs', ('bacon', ('eggs', 'toast')))))
('good', ('bacon', ('eggs', ('bacon', ('eggs', ('bacon', 'beans'))))))
('nice', ('eggs', ('bacon', ('eggs', ('bacon', ('eggs', 'toast'))))))'''.splitlines()]

if __name__ == "__main__":
    unittest.main()