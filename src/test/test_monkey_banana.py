import unittest
import pyrules.rulebook
import itertools

'''This pyrules example goes out to the Prolog enthusiasts.
   It is an implementation of Ivan Bratko's monkey&banana example:
   http://books.google.co.uk/books?id=-15su78YRj8C&pg=PA46&lpg=PA46&dq=monkey+banana+bratko&source=bl&ots=TA22Ve7wHK&sig=a1x6v2nvu7C78wjAs2lGMOKXUt4&hl=en&sa=X&ei=buKdUqioJeWX7QaLloCoAg&ved=0CC8Q6AEwAA#v=onepage&q=monkey%20banana%20bratko&f=false

   Our protagonist monkey is in a room with a door and a window. In the middle of the room,
   a banana is hanging from a rope in the ceiling. The monkey wants the banana, but it can't reach that high.
'''
POSITIONS = ['middle', 'atdoor', 'atwindow']
'''
   Luckily, there's a box at the window that the monkey can push around and climb.
'''
LEVELS = ['onfloor', 'onbox']
'''
   The monkey does not have the banana, but if it climbs the box in the middle of the room
   and grasps the banana, then it will have its banana. 
'''
HAS_HASNOT = ['has', 'hasnot']
'''
   Bratko's model of this puzzle takes the form
       (state, move, state2)
   where each state is on the form
       ('state',  monkey_pos, monkey_level, box_pos, has_hasnot)
   and a move is 'grasp', 'climb', ('walk', pos1, pos2) or ('push', pos1, pos2).
   
   The setUp() method implements Bratko's rules as a pyrules.rulebook.Rulebook.
   The test_monkey_can_get_banana() method verifies that 
       ('canget', ('state', 'atdoor', 'onfloor', 'atwindow', 'hasnot')
   is eventually generated by these rules.
   I.e. starting from the door, our monkey can get its banana.
'''
class Test(unittest.TestCase):
    def setUp(self):
        '''Defines the Rulebook.
           The comments in this method quote the original Prolog implementation. 
        '''
        r = pyrules.rulebook.Rulebook()
        ( #canget(Statel) :- move(Statel, Move, State2), canget(State2).
         r.rule('canget', 'State1')
         .premise('move', 'State1', 'Move', 'State2')
         .premise('canget', 'State2')
        )
        #canget(state(-, -, -, has)).
        for monkey_pos, monkey_level, box_pos in itertools.product(POSITIONS, LEVELS, POSITIONS):
            r.rule('canget', ('state', monkey_pos, monkey_level, box_pos, 'has'))
        #move(state( middle, onbox, middle, hasnot), grasp, state( middle, onbox, middle, has)).
        r.rule('move', 
                    ('state', 'middle', 'onbox', 'middle', 'hasnot'), 
                    'grasp',
                    ('state', 'middle', 'onbox', 'middle', 'has'))
        #move(state(P, onfloor, P, H), climb, state(P, onbox, P, H)).
        for pos, has_hasnot in itertools.product(POSITIONS, HAS_HASNOT):
            r.rule('move',
                       ('state', pos, 'onfloor', pos, has_hasnot),
                       'climb',
                       ('state', pos, 'onbox', pos, has_hasnot))
        #move(state(Pl, onfloor, Pl, H), push(Pl, P2), state(P2, onfloor, P2, H)).
        for pos_from, pos_to in itertools.permutations(POSITIONS, 2):
            for has_hasnot in HAS_HASNOT:
                r.rule('move',
                           ('state', pos_from, 'onfloor', pos_from, has_hasnot),
                           ('push', pos_from, pos_to),
                           ('state', pos_to, 'onfloor', pos_to, has_hasnot))
        #move(state(Pl, onfloor, B, H), walk(Pl, P2), state(P2, onfloor, B, H)).
        for pos_from, pos_to in itertools.permutations(POSITIONS, 2):
            for box_pos, has_hasnot in itertools.product(POSITIONS, HAS_HASNOT):
                r.rule('move',
                           ('state', pos_from, 'onfloor', box_pos, has_hasnot),
                           ('walk', pos_from, pos_to),
                           ('state', pos_to, 'onfloor', box_pos, has_hasnot))
        self.rulebook = r
    
    def test_monkey_can_get_banana(self):
        '''Verify that the monkey can get the banana.
           In fact, the poor, hungry monkey only has to go through a bit more than 7000 terms
           to get there.
        '''
        first_7500 = set(itertools.islice(self.rulebook.generate_terms(), 7500))
        self.assertIn(('canget', ('state', 'atdoor', 'onfloor', 'atwindow', 'hasnot')), first_7500)

if __name__ == "__main__":
    unittest.main()